(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[828],{1405:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var a=n(4034),r=n(9973),o=(n(7294),n(3905)),i=["components"],s={id:"quick-start",title:"Quick Start",sidebar_position:2},p=void 0,c={unversionedId:"react-aptor/quick-start",id:"react-aptor/quick-start",isDocsHomePage:!1,title:"Quick Start",description:"Connection process",source:"@site/docs/react-aptor/quick-start.mdx",sourceDirName:"react-aptor",slug:"/react-aptor/quick-start",permalink:"/docs/react-aptor/quick-start",editUrl:"https://github.com/ahimico/ahimico.github.io/edit/master/website/docs/react-aptor/quick-start.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"quick-start",title:"Quick Start",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Tutorials Overview",permalink:"/docs/react-aptor/tutorials-overview"},next:{title:"API Reference",permalink:"/docs/react-aptor/api-reference"}},l=[{value:"Connection process",id:"connection-process",children:[],level:2},{value:"1. Define the <strong>instantiate</strong> function.",id:"1-define-the-instantiate-function",children:[{value:"API usage",id:"api-usage",children:[],level:3}],level:2}],u={toc:l};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"connection-process"},"Connection process"),(0,o.kt)("p",null,"Connect your react app to any third party in three-step"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Define the instantiate function"),(0,o.kt)("li",{parentName:"ol"},"Define the get API function"),(0,o.kt)("li",{parentName:"ol"},"Connect API to react by ",(0,o.kt)("inlineCode",{parentName:"li"},"useAptor"))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"1-define-the-instantiate-function"},"1. Define the ",(0,o.kt)("strong",{parentName:"h2"},"instantiate")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="construct.js"',title:'"construct.js"'},"import Something from 'some-third-party'\n\nexport default function instantiate(node, params) {\n  return new Something(node, params)\n}\n")),(0,o.kt)("p",null,"This function will return an instance of the third-party package. You have access to node (DOM-node","*",") and params."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," is passed by react-aptor as a reference to DOM that is occasionally used as a wrapper for embedding UI.\nThe DOM-node","*"," will become more clear in the third step."),(0,o.kt)("p",{parentName:"blockquote"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"params")," are optional parameters that are passed by react-aptor and define by you. see the third step.\nThe params will be passed by you and will be more clear in third step."),(0,o.kt)("p",{parentName:"blockquote"},"name this file ",(0,o.kt)("strong",{parentName:"p"},"construct.js")," as convention \u2728.")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Define the ",(0,o.kt)("strong",{parentName:"li"},"get API")," function.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="api.js"',title:'"api.js"'},"export default function getAPI(instance, params) {\n  // return corresponding API Object\n  return () => ({\n    api_key: () => {\n      /* api definition using instance and params */\n      console.log(instance)\n    },\n  })\n}\n")),(0,o.kt)("p",null,"The react-aptor will pass the latest instance of your third-party which has been defined in the first step by ",(0,o.kt)("strong",{parentName:"p"},"instantiate")," function along with ",(0,o.kt)("strong",{parentName:"p"},"params")," to ",(0,o.kt)("strong",{parentName:"p"},"getAPI")," function."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"instance")," is returned instance of your third-party.\nTechnically it is exactly going to be ",(0,o.kt)("strong",{parentName:"p"},"instantiate(node, params)")),(0,o.kt)("p",{parentName:"blockquote"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"params")," are optional parameters that are passed by react-aptor and define by you. see the third step.\nThe params will be passed by you and will be more clear in third step."),(0,o.kt)("p",{parentName:"blockquote"},"name this file ",(0,o.kt)("strong",{parentName:"p"},"api.js")," as convention \u2728.")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Connect API to react")," by ",(0,o.kt)("inlineCode",{parentName:"li"},"useAptor"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="connector.jsx"',title:'"connector.jsx"'},"import useAptor from 'react-aptor'\nimport getAPI from './api'\nimport instantiate from './construct'\n\nconst Connector = (props, ref) => {\n  const aptorRef = useAptor(ref, {\n    getAPI,\n    instantiate,\n    /* params: anything */\n  })\n\n  return <div ref={aptorRef} />\n}\n\nexport default React.forwardRef(Connector)\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"name this file ",(0,o.kt)("strong",{parentName:"p"},"connector.jsx")," as convention \u2728\nIf you are using react 17 or newer version, you can also name it ",(0,o.kt)("strong",{parentName:"p"},"connector.js"))),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"hook in one look")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"useAptor hook in one look"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const aptorRef = useAptor(ref, configuration, deps)\n")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"ref"),"\nFor the connection phase, you need to define a ",(0,o.kt)("strong",{parentName:"p"},"forwardRef")," component. The ",(0,o.kt)("inlineCode",{parentName:"p"},"useAptor")," hook needs forwarded-ref as the first argument, this is necessary to bind all your defined api to this ref."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"configuration"),"\nAs the configuration argument you need to pass defined ",(0,o.kt)("strong",{parentName:"p"},"instantiate")," (defined in the first step \u261d\ufe0f), ",(0,o.kt)("strong",{parentName:"p"},"getAPI")," (defined in the second step \u261d\ufe0f) and your custom params argument. The useAptor hook will return you a ref (",(0,o.kt)("inlineCode",{parentName:"p"},"aptorRef"),") which you can bind to your DOM node."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"params")," doesn't have any limitation, it can be any arbitrary type e.g. undefined, number, string or an object containing all of them. The params will be then passed to your instantiate and getAPI function, as you saw in the first and second steps.\nParams is the best place to connect props to your low-level api it means \u201dNo Need\u201d for extra function generation \ud83e\udd73")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"deps"),"\nIs the same as Dependencies array default value is ",(0,o.kt)("inlineCode",{parentName:"p"},"[]")," but you can override it as the third and lat argument of useAptor. It maybe needed in situation which you want to force re-instantiate by some prop change. It will use shallow comparison (as react do) for deps array and will call your ",(0,o.kt)("inlineCode",{parentName:"p"},"instantiate")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"getApI")," in a row."),(0,o.kt)("h3",{id:"api-usage"},"API usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="consumer.jsx"',title:'"consumer.jsx"'},"const Main = () => {\n  const ref = createRef()\n\n  const apiKeyHandler = () => {\n    if (ref.current) {\n      ref.current.api_key()\n    }\n  }\n\n  return (\n    <div>\n      <Connector ref={ref} />\n      <Button onClick={apiKeyHandler}>api call</Button>\n    </div>\n  )\n}\n")))}d.isMDXComponent=!0}}]);