(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[536],{2691:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var n=a(2122),r=a(9756),i=(a(7294),a(3905)),o=["components"],p={id:"api-reference",title:"API Reference",sidebar_position:3},s=void 0,c={unversionedId:"react-aptor/api-reference",id:"react-aptor/api-reference",isDocsHomePage:!1,title:"API Reference",description:"Parameters",source:"@site/docs/react-aptor/api-reference.mdx",sourceDirName:"react-aptor",slug:"/react-aptor/api-reference",permalink:"/docs/react-aptor/api-reference",editUrl:"https://github.com/ahimico/ahimico.github.io/edit/master/website/docs/react-aptor/api-reference.mdx",version:"current",sidebarPosition:3,frontMatter:{id:"api-reference",title:"API Reference",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Quick Start",permalink:"/docs/react-aptor/quick-start"},next:{title:"Tips & Tricks",permalink:"/docs/react-aptor/tips-&-tricks"}},l=[{value:"Parameters",id:"parameters",children:[]},{value:"Core",id:"core",children:[{value:"<strong>ref</strong>",id:"ref",children:[]},{value:"<strong>configuration</strong>",id:"configuration",children:[]},{value:"<strong>deps</strong> <code>[]</code>",id:"deps-",children:[]}]}],u={toc:l};function d(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useAptor")," accepts a ref, a configuration object and a dependencies array parameter, with the following options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// every possible return value as an api value e.g. function, class, ...\ntype APIObject = Record<string, any>;\n\ninterface AptorConfiguration<T> {\n\n  getAPI: (instance: T|null, prams?: any) => (() => APIObject);\n\n  instantiate: (node: HTMLElement|null, params?: any) => T|null;\n\n  destroy?: (instance: Nullable<T>, params?: any) => void;\n\n  params?: any;\n}\n\nconst useAptor<T>(\n  // React ref holder for APIObject key-value pairs\n  ref: Ref<APIObject>,\n  configuration: AptorConfiguration<T>,\n  deps: any[] = []\n  // Return a bindable react ref object for your dom elements\n): RefObject<HTMLElement> {\n  // ...\n}\n")),(0,i.kt)("h2",{id:"core"},"Core"),(0,i.kt)("h3",{id:"ref"},(0,i.kt)("strong",{parentName:"h3"},"ref")),(0,i.kt)("p",null,"The react ",(0,i.kt)("strong",{parentName:"p"},"useRef")," or ",(0,i.kt)("strong",{parentName:"p"},"createRef")," ref instance which has been passed throw ",(0,i.kt)("strong",{parentName:"p"},"react.forwardRef")," method.\nyour api will be stored in this ref."),(0,i.kt)("h3",{id:"configuration"},(0,i.kt)("strong",{parentName:"h3"},"configuration")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"instantiate"},(0,i.kt)("strong",{parentName:"h3"},"instantiate")),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"function(node, params): Instance")),(0,i.kt)("p",{parentName:"li"},"A function that receives probable bounded-node and params. It then returns an instance of your third-party.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"destroy"},(0,i.kt)("strong",{parentName:"h3"},"destroy")),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"function(previousInstance, params): void")),(0,i.kt)("p",{parentName:"li"},"A function that receives previous created instance and params. It is useful when you want to perform the cleanup before new instance creation. e.g. ",(0,i.kt)("strong",{parentName:"p"},"remove event listeners"),", ",(0,i.kt)("strong",{parentName:"p"},"free up allocated memories"),", ",(0,i.kt)("strong",{parentName:"p"},"destroy internally")," & etc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"getapi"},(0,i.kt)("strong",{parentName:"h3"},"getAPI")),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"function(Instance, params): ApiObject")),(0,i.kt)("p",{parentName:"li"},"A function which receives instance of you third-party and params. It then returns a key-value pair object for api handlers.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"params-any"},(0,i.kt)("strong",{parentName:"h3"},"params")," ",(0,i.kt)("inlineCode",{parentName:"h3"},"any")),(0,i.kt)("p",{parentName:"li"},"Params can have any arbitrary type and can be used with props or pre-defined options."))),(0,i.kt)("h3",{id:"deps-"},(0,i.kt)("strong",{parentName:"h3"},"deps")," ",(0,i.kt)("inlineCode",{parentName:"h3"},"[]")),(0,i.kt)("p",null,"React dependencies array for re-instantiating your third-party-packages. It will call ",(0,i.kt)("inlineCode",{parentName:"p"},"instantiate")," with latest node, params when ever shallow comparison for with the previous deps array finds inequality."))}d.isMDXComponent=!0}}]);