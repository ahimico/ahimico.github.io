(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[477],{4580:function(e){"use strict";e.exports=JSON.parse('{"blogPosts":[{"id":"console-log-arrays","metadata":{"permalink":"/blog/console-log-arrays","editUrl":"https://github.com/ahimico/ahimico.github.io/edit/master/website/blog/2021-10-26-console-log-arrays.md","source":"@site/blog/2021-10-26-console-log-arrays.md","title":"console.log([`Arrays`])","description":"Who ever you go there is need for holding these array operation piece together","date":"2021-10-26T00:00:00.000Z","formattedDate":"October 26, 2021","tags":[{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"javascript","permalink":"/blog/tags/javascript"},{"label":"arrays","permalink":"/blog/tags/arrays"}],"readingTime":3.835,"truncated":true,"authors":[{"name":"Amir.H Ebrahimi","title":"Frontend developer","url":"https://github.com/realamirhe","imageURL":"https://avatars.githubusercontent.com/u/23579958?s=48&v=4"}],"nextItem":{"title":"Aptor Is All You Need","permalink":"/blog/aptor-is-all-you-need"}},"content":"Who ever you go there is need for holding these array operation piece together\\n\\n\x3c!--truncate--\x3e\\n\\n```typescript\\nconst numbers: number[] = [0, 1, 2]\\nconst alphabet: string[] = [\'a\', \'b\', \'c\']\\n```\\n\\n## Indexing\\n\\n```typescript\\nnumbers.indexOf(2) // 2\\nnumbers.indexOf(10) // -1\\nnumbers[5] // undefined\\nnumbers[-1] // undefined\\nnumbers[Infinity] // undefined\\nnumbers[\'1\'] // 1\\n```\\n\\n> **Bonus tips (negative index)**\\n\\n```typescript\\nnumbers.at(-1) // 2, (builtin at method)\\n\\nconst coolNumbers = new Proxy(numbers, {\\n  get(target, props) {\\n    const index: number = +(<string>props)\\n    if (index < 0) return Reflect.get(target, index + target.length)\\n    return Reflect.get(target, props)\\n  },\\n})\\ncoolNumbers[-1] // 2\\n```\\n\\n## Adding (appending) items\\n\\n```typescript\\n/* IMMUTABILITY */\\nnumbers.concat([3, 4]) // [ 0, 1, 2, 3, 4 ]\\nnumbers // [ 0, 1, 2]\\n\\n/* INPLACE CHANGES */\\nnumbers.push(3) // numbers -> [0, 1, 2, 3]\\nnumbers.unshift(-2) //  numbers -> [-2, 0, 1, 2, 3]\\nnumbers.splice(1, 0, -1) // numbers -> [-2, -1, 0, 1, 2, 3]\\nnumbers.splice(0, 0, ...[-6, -4, -3])\\nnumbers // [-6, -4, -3, -2, -1,  0,  1,  2,  3]\\n```\\n\\n**Replacing item**\\n\\n```typescript\\nnumbers.splice(0, 1, -5) // numbers -> [-5, -4, -3, -2, -1,  0,  1,  2,  3]\\nnumbers.splice(500, 100, 4) // numbers -> [-5, -4, -3, -2, -1,  0,  1,  2,  3, 5]\\nnumbers[9] = 4 // numbers -> [-5, -4, -3, -2, -1,  0,  1,  2,  3, 4]\\nnumbers[(-5, -4, -3, -2, -1, 0, 1, 2, 3, 4)]\\n```\\n\\n## Creating array\\n\\n```typescript\\nnew Array(5) // [ <5 empty items> ]\\nArray.from({ length: 5 }) // [ undefined, undefined, undefined, undefined, undefined ]\\nArray.from(\'12345\', _ => undefined) // [ undefined, undefined, undefined, undefined, undefined ]\\nArray.from(document.querySelectorAll(\'img\'), img => img.src)\\nArray.of(1, 2, 3, 4, 5) // [ 1, 2, 3, 4, 5 ]\\nArray(5) // [ <5 empty items> ]\\nArray.from({ length: 5 }, (_, i) => i) // [ 0, 1, 2, 3, 4 ]\\n```\\n\\n:::tip Bonus tips\\nManipulating array length is possible and it necessary in a case you want to implement something like [undo-redo feature](https://gist.github.com/realamirhe/afa63f32050d814ff9bc6f944e06fc48#file-useundoredo-ts), or stack base operation e.g. saving browser router history\\n:::\\n\\n```typescript\\nalphabet.length = 5\\nalphabet // [ \'a\', \'b\', \'c\', <2 empty items> ] length is 5\\nalphabet[7] = \'e\'\\nalphabet // [ \'a\', \'b\', \'c\', <4 empty items>, \'e\' ] length is 8\\nalphabet.length = 3\\nalphabet // [ \'a\', \'b\', \'c\' ] length is 3\\n```\\n\\n## Iteration\\n\\n\x3c!-- prettier-ignore-start --\x3e\\n```typescript\\nalphabet.entries() // Iterator over [[0,\'a\'], [1, \'b\'], [2, \'c\']]\\nfor (const [index, element] of alphabet.entries()) {}\\nalphabet.keys() // Iterator over [0, 1, 2]\\nfor (const index in alphabet) {}\\nalphabet.values() // Iterator over [ \'a\', \'b\', \'c\' ]\\nfor (const value of alphabet) {}\\n```\\n\x3c!-- prettier-ignore-end --\x3e\\n\\n## Inclusion\\n\\n```typescript\\nalphabet.includes(\'c\') // true\\nalphabet.includes(\'c\', 1) // true, from index 1\\nalphabet.includes(\'c\', -2) // true, from index (length - 2)\\nalphabet.find(item => item.charCodeAt(0) > \'b\'.charCodeAt(0)) // c\\nalphabet.findIndex(item => item.charCodeAt(0) > \'b\'.charCodeAt(0)) // 2\\nalphabet.lastIndexOf(\'c\') // 2\\nalphabet.indexOf(\'c\') // 2\\nalphabet.indexOf(\'d\') // -1\\n```\\n\\n### Operators\\n\\n```typescript\\nalphabet.every(item => item.charCodeAt(0) < \'c\'.charCodeAt(0)) // false\\nalphabet.some(item => item.charCodeAt(0) < \'c\'.charCodeAt(0)) // true\\n\\n// **flat** ES2019\\nconst nested = [0, [1], [[2]], [[[3]]], [[[[4], 3], 2], 1]]\\nnested.flat() // [ 0, 1, [ 2 ], [ [ 3 ] ], [ [ [4], 3 ], 2 ], 1 ], default level  1\\nnested.flat(3) // [0, 1, 2, 3, [ 4 ], 3, 2, 1]\\nnested.flat(Infinity) // [0, 1, 2, 3, 4 , 3, 2, 1]\\n\\n// **joining**\\nalphabet.join(\',\') // a,b,c\\n// @ts-ignore\\nalphabet.join`,` // a,b,c\\nalphabet.toString() // a,b,c\\n\\n// **reducing**\\nalphabet.reduce((acc, chr) => acc + \', \' + chr, \'\') // , a, b, c\\nalphabet.reduceRight((acc, chr) => acc + \', \' + chr, \'\') // , c, b, a\\nalphabet.reverse() // alphabet -> [ \'c\', \'b\', \'a\' ]\\nalphabet // [ \'c\', \'b\', \'a\' ]\\n\\n// **sorting**\\nalphabet.sort() // shuffle alphabet, e.g. alphabet -> [ \'b\', \'a\', \'c\' ]\\nalphabet.sort(() => Math.random() - 0.5) // alphabet -> [ \'a\', \'b\', \'c\' ]\\nalphabet // [ \'a\', \'b\', \'c\' ]\\n\\n// **subset**\\nalphabet.slice(1) // [\'b\', \'c\']\\nalphabet.slice(0, 2) // [ \'a\', \'b\' ]\\n```\\n\\n:::tip Bonus tips\\nFor mapping over an array it must have value, it can be undefined or null or any thing, but it can not be empty .\\n:::\\n\\n```typescript title=pythonic-range.ts\\nconst range = (start: number, stop?: number, step?: number) => {\\n  if (step === undefined) step = 1\\n  if (stop === undefined) {\\n    stop = start\\n    start = 0\\n  }\\n\\n  return Array.from(\\n    { length: (stop - start) / step + 1 },\\n    (_, i) => start + i * step!,\\n  )\\n}\\n\\nfor (let i in range(10)) console.log(i)\\n```"},{"id":"aptor-is-all-you-need","metadata":{"permalink":"/blog/aptor-is-all-you-need","editUrl":"https://github.com/ahimico/ahimico.github.io/edit/master/website/blog/2021-05-26-aptor-is-all-you-need.md","source":"@site/blog/2021-05-26-aptor-is-all-you-need.md","title":"Aptor Is All You Need","description":"Get rid off all old-style class-based integration for every react-something packages within minutes.","date":"2021-05-26T00:00:00.000Z","formattedDate":"May 26, 2021","tags":[{"label":"react-aptor","permalink":"/blog/tags/react-aptor"},{"label":"react","permalink":"/blog/tags/react"},{"label":"api","permalink":"/blog/tags/api"}],"readingTime":2.82,"truncated":true,"authors":[{"name":"Amir.H Ebrahimi","title":"Frontend developer @Weblite","url":"https://github.com/realamirhe","imageURL":"https://avatars.githubusercontent.com/u/23579958?s=48&v=4"}],"prevItem":{"title":"console.log([`Arrays`])","permalink":"/blog/console-log-arrays"}},"content":"**Get rid off** all old-style class-based integration for every react-something packages within minutes.\\n\\n\x3c!--truncate--\x3e\\n\\n## TLDR\\n\\nThe dominant `react-something` packages are based on old-style class-based integration that includes a third-party and a react wrapper that defines new things for each existing API in that third party. The best available method is to bind a `ref` filling the integration gap through the react ref system.\\n\\nWe propose a new simple package, the `react-aptor`, based solely on integration mechanisms, removing the middle effect of react packages entirely.\\n\\n## Story\\n\\nLet\u2019s say there comes a trending video package called `doom.js`, featured just recently on npm. The doom package has been developed in typescript compatible with all frameworks and libraries. Now the community tries to help the author and make integrated packages on their own \ud83d\ude4c\ufe0f.\\n\\nLet\u2019s make it simple, doom can only play/pause a video for now. It might not be cool enough to win the \\"Breakthrough of the year\u201d, but it is definitely one of the best \ud83d\ude04.\\n\\nThen we are going to make a react package out of it, called `react-doom`. It is going to be something like this:\\n\\n```jsx\\n<ReactDoom src={\'video-url\'} isPlaying={false} ref={playerRef} />\\n```\\n\\nThen users can play/pause the video with their UI using `playerRef.current`\\n\\nEverything is fine, let\u2019s add a new highly voted feature to `doom.js` to change the speed of the video.\\n\\n\x3c!-- prettier-ignore-start --\x3e\\nAuthor starts coding  \\nBoom \ud83d\udca5  \\nThe author finishes the feature  \\nIt is now running tests  \\nAll test passed \ud83d\udd7a  \\nDoom.js is going to be published  \\nOMG it is also compatible  \\nThe new minor version is coming \u2026  \\nDone \ud83c\udd97  \\n\\nSo let\u2019s update our `react-doom` package and use the new 2x feature on our videos.  \\n`Published 25 days ago`, Okay let\u2019s check their issue, it must be under `doing` board  \\nlast interaction for the author is `2 months ago`  \\nSo what, making another **Old guy pc Meme!**\\n\\n\x3c!-- prettier-ignore-end --\x3e\\n\\n## Aptor\\n\\nWhy should react wrapper block the development phase of a package?\\n\\nConnect your doom.js to [react-aptor](https://www.npmjs.com/package/react-aptor) then you have all the functionality.\\nUse a tiny wrapper around the connected component. Do every of the following you want\\n\\n- Trigger prop changes using `useEffect`\\n- Change namings\\n- Hoist full access reference to raw `doom.js` API using `forwardRef`\\n\\nLet\u2019s call this new react package `raptor-doom`.\\nraptor-doom is a simple, tiny piece that helps developers to use it independent of the react package itself.\\n\\nSo in the case of the 2x feature, the only thing which is needed is to update the `doom.js` package and use the rate feature out of the box.\\n\\n```jsx\\n<RaptorDoom isPlaying={isPlaying} ref={ref} />\\n<button onClick={() => {ref.current._doom.setRate(2)}}>\\n speed up\\n</button>\\n```\\n\\nThe `react-aptor` helps you to make this process as easy as one react hook call.\\n\\n```jsx title=connector.jsx\\nconst Connector = (props, ref) => {\\n  const aptorRef = useAptor(ref, {\\n    // a function which returns a slice of doom.js apis\\n    getAPI,\\n    // a function which instantiate doom.js player\\n    instantiate,\\n    // anything to be used in both getAPI, instantiate\\n    params: props,\\n  })\\n\\n  // accessing node using returned ref\\n  return <div ref={aptorRef} />\\n}\\n```\\n\\n:::note Get connected\\nYou can find lots of useful examples and integration in react-aptor [samples section](https://github.com/realamirhe/react-aptor/blob/master/doc/samples.md)\\n:::\\n\\nAlso there is a brand new re-write of react-howler using react-aptor making new tiny (`1.04kB`) package called [raptor-howler](https://www.npmjs.com/package/raptor-howler)\\n\\n## Conclusion\\n\\nreact-aptor helps you to make functional, small, **Forward Compatible** packages within react."}]}')}}]);